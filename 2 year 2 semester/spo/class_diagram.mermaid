classDiagram
    %% Repository Pattern
    class ITeamRepository {
        <<interface>>
        +getAll(pagination, filter) List~Team~
        +getById(id) Team
        +create(team) Team
        +update(id, team) Team
        +delete(id) bool
    }
    
    class TeamRepository {
        -db Database
        +getAll(pagination, filter) List~Team~
        +getById(id) Team
        +create(team) Team
        +update(id, team) Team
        +delete(id) bool
    }
    
    %% Service Layer
    class TeamService {
        -repository ITeamRepository
        +getTeams(pagination, filter) List~TeamDTO~
        +getTeamById(id) TeamDTO
        +createTeam(teamDTO) TeamDTO
        +updateTeam(id, teamDTO) TeamDTO
        +deleteTeam(id) bool
        +getTeamStandings(season) List~StandingDTO~
    }
    
    %% DTO Pattern
    class TeamDTO {
        +id int
        +name string
        +city string
        +coach string
        +last_season_place int
    }
    
    class Team {
        +id int
        +name string
        +city string
        +coach string
        +last_season_place int
        +players List~Player~
    }
    
    %% Factory Pattern
    class DTOFactory {
        +createTeamDTO(team) TeamDTO
        +createPlayerDTO(player) PlayerDTO
        +createMatchDTO(match) MatchDTO
    }
    
    %% Controller/Router with Dependency Injection
    class TeamRouter {
        -service TeamService
        +getTeams() Response
        +getTeam(id) Response
        +createTeam() Response
        +updateTeam(id) Response
        +deleteTeam(id) Response
    }
    
    ITeamRepository <|.. TeamRepository : implements
    TeamService o-- ITeamRepository : uses
    TeamRouter o-- TeamService : uses
    DTOFactory --> TeamDTO : creates
    TeamService --> DTOFactory : uses
    TeamRepository --> Team : manages