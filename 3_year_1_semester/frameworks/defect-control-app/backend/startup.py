# backend/startup.py

import sys
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from sqlalchemy.exc import OperationalError

import models
from database import SessionLocal, engine
from schemas import UserRole # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–ª–∏ –∏–∑ schemas

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_default_users(db: Session):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    
    default_users_data = [
        ("–∏–Ω–∂–µ–Ω–µ—Ä_—Ç–µ—Å—Ç", "password", UserRole.ENGINEER),
        ("–º–µ–Ω–µ–¥–∂–µ—Ä_—Ç–µ—Å—Ç", "password", UserRole.MANAGER),
        ("—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å_—Ç–µ—Å—Ç", "password", UserRole.OBSERVER),
    ]

    for username, password, role in default_users_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
        if not db.query(models.User).filter(models.User.username == username).first():
            hashed_password = pwd_context.hash(password)
            db_user = models.User(
                username=username, 
                hashed_password=hashed_password, 
                role=role.value
            )
            db.add(db_user)
            db.commit()
            print(f"‚úÖ Default user '{username}' ({role.value}) created.")
        else:
             print(f"üí° Default user '{username}' already exists.")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("üöÄ Initializing database...")
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        models.Base.metadata.create_all(bind=engine) 
        print("‚úÖ Database tables created successfully.")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db = SessionLocal()
        try:
            create_default_users(db)
        finally:
            db.close()
            
    except OperationalError as e:
        print("‚ùå FATAL: Could not connect to the database. Make sure PostgreSQL is running and configured correctly.")
        print(f"Error details: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå An unexpected error occurred during initialization: {e}")
        sys.exit(1)
        
    print("‚ú® Database initialization complete.")

if __name__ == "__main__":
    init_db()